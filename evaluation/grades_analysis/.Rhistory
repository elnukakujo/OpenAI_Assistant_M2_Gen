df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx')
df <- read_xlsx('IFT6253LLMAssistantEvaluation.xlsx')
library(readxl)
df <- read_xlsx('IFT6253LLMAssistantEvaluation.xlsx')
df <- read_xlsx('IFT6253LLMAssistantEvaluation.xlsx')
head(df)
df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx')
head(df)
df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx', skip=2)
head(df)
df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx', skip=1)
head(df)
View(df)
df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx', skip=1)
colnames(df)[7] <- "Class_Precision"
colnames(df)[8] <- "Class_Recall"
colnames(df)[9] <- "Class_F1"
colnames(df)[10] <- "Attr_Precision"
colnames(df)[11] <- "Attr_Recall"
colnames(df)[12] <- "Attr_F1"
colnames(df)[13] <- "Rel_Precision"
colnames(df)[14] <- "Rel_Recall"
colnames(df)[15] <- "Rel_F1"
head(df)
df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx', skip=1)
colnames(df)[3] <- "Shot_Example"
colnames(df)[6] <- "Pre_Model"
colnames(df)[7] <- "Class_Precision"
colnames(df)[8] <- "Class_Recall"
colnames(df)[9] <- "Class_F1"
colnames(df)[10] <- "Attr_Precision"
colnames(df)[11] <- "Attr_Recall"
colnames(df)[12] <- "Attr_F1"
colnames(df)[13] <- "Rel_Precision"
colnames(df)[14] <- "Rel_Recall"
colnames(df)[15] <- "Rel_F1"
df$Combination <- factor(df$Combination)
df$Shot_Example <- factor(df$Shot_Example)
df$DSL2Gen <- factor(df$DSL2Gen)
df$Divide <- factor(df$Divide)
df$Pre_Model <- factor(df$Pre_Model)
head(df)
df_long <- df %>%
pivot_longer(
cols = starts_with("Class_"):starts_with("Rel_"), # Select relevant columns
names_to = c("ElementType", ".value"),
names_sep = "_"
)
library(readxl)
library(dplyr)
df_long <- df %>%
pivot_longer(
cols = starts_with("Class_"):starts_with("Rel_"), # Select relevant columns
names_to = c("ElementType", ".value"),
names_sep = "_"
)
library(readxl)
library(dplyr)
library(tidyr)
df_long <- df %>%
pivot_longer(
cols = starts_with("Class_"):starts_with("Rel_"), # Select relevant columns
names_to = c("ElementType", ".value"),
names_sep = "_"
)
head(df_long)
df_long <- df %>%
pivot_longer(
cols = colnames(df)[7:15], # Select relevant columns
names_to = c("ElementType", ".value"),
names_sep = "_"
)
head(df_long)
View(df_long)
ggplot(df_long, aes(x = Shot_Example, y = Precision, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "PreResult by ElementType and Shot_Example",
x = "Shot_Example",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
ggplot(df_long, aes(x = Shot_Example, y = Precision, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "PreResult by ElementType and Shot_Example",
x = "Shot_Example",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
ggplot(df_long, aes(x = Shot_Example, y = Precision, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "PreResult by ElementType and Shot_Example",
x = "Shot_Example",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = DSL2Gen, y = Precision, fill = DSL2Gen)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "PreResult by ElementType and DSL2Gen",
x = "DSL2Gen",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Divide, y = Precision, fill = Divide)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "PreResult by ElementType and Divide",
x = "Divide",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Pre_Model, y = Precision, fill = Pre_Model)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "PreResult by ElementType and Pre_Model",
x = "Pre_Model",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
ggplot(df_long, aes(x = Shot_Example, y = Precision, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Shot_Example",
x = "Shot_Example",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = DSL2Gen, y = Precision, fill = DSL2Gen)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and DSL2Gen",
x = "DSL2Gen",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Divide, y = Precision, fill = Divide)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Divide",
x = "Divide",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Pre_Model, y = Precision, fill = Pre_Model)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Pre_Model",
x = "Pre_Model",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
ggplot(df_long, aes(x = Shot_Example, y = F1, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Shot_Example",
x = "Shot_Example",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = DSL2Gen, y = F1, fill = DSL2Gen)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and DSL2Gen",
x = "DSL2Gen",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Divide, y = F1, fill = Divide)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Divide",
x = "Divide",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Pre_Model, y = F1, fill = Pre_Model)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Pre_Model",
x = "Pre_Model",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
ggplot(df_long, aes(x = Shot_Example, y = Precision, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Shot_Example",
x = "Shot_Example",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Shot_Example, y = Recall, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Recall by ElementType and Shot_Example",
x = "Shot_Example",
y = "Recall") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Shot_Example, y = F1, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Shot_Example",
x = "Shot_Example",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
library(readxl)
library(dplyr)
library(tidyr)
library(lme4)
library(lmerTest)
df <- read_excel('IFT6253LLMAssistantEvaluation.xlsx', skip=1)
colnames(df)[3] <- "Shot_Example"
colnames(df)[6] <- "Pre_Model"
colnames(df)[7] <- "Class_Precision"
colnames(df)[8] <- "Class_Recall"
colnames(df)[9] <- "Class_F1"
colnames(df)[10] <- "Attr_Precision"
colnames(df)[11] <- "Attr_Recall"
colnames(df)[12] <- "Attr_F1"
colnames(df)[13] <- "Rel_Precision"
colnames(df)[14] <- "Rel_Recall"
colnames(df)[15] <- "Rel_F1"
df$Combination <- factor(df$Combination)
df$Shot_Example <- factor(df$Shot_Example)
df$DSL2Gen <- factor(df$DSL2Gen)
df$Divide <- factor(df$Divide)
df$Pre_Model <- factor(df$Pre_Model)
head(df)
df_long <- df %>%
pivot_longer(
cols = colnames(df)[7:15], # Select relevant columns
names_to = c("ElementType", ".value"),
names_sep = "_"
)
head(df_long)
library(ggplot2)
ggplot(df_long, aes(x = Shot_Example, y = Precision, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Shot_Example",
x = "Shot_Example",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Shot_Example, y = Recall, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Recall by ElementType and Shot_Example",
x = "Shot_Example",
y = "Recall") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Shot_Example, y = F1, fill = Shot_Example)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Shot_Example",
x = "Shot_Example",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = DSL2Gen, y = Precision, fill = DSL2Gen)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and DSL2Gen",
x = "DSL2Gen",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = DSL2Gen, y = Recall, fill = DSL2Gen)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Recall by ElementType and DSL2Gen",
x = "DSL2Gen",
y = "Recall") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = DSL2Gen, y = F1, fill = DSL2Gen)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and DSL2Gen",
x = "DSL2Gen",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Divide, y = Precision, fill = Divide)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Divide",
x = "Divide",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Divide, y = Recall, fill = Divide)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Recall by ElementType and Divide",
x = "Divide",
y = "Recall") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Divide, y = F1, fill = Divide)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Divide",
x = "Divide",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Pre_Model, y = Precision, fill = Pre_Model)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Precision by ElementType and Pre_Model",
x = "Pre_Model",
y = "Precision") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Pre_Model, y = Recall, fill = Pre_Model)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "Recall by ElementType and Pre_Model",
x = "Pre_Model",
y = "Recall") +
theme_minimal() +
theme(legend.position = "none")
ggplot(df_long, aes(x = Pre_Model, y = F1, fill = Pre_Model)) +
geom_boxplot() +
facet_wrap(~ ElementType) + # Facet by ElementType
labs(title = "F1 by ElementType and Pre_Model",
x = "Pre_Model",
y = "F1") +
theme_minimal() +
theme(legend.position = "none")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Class", ]$Precision)
print("Precision:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Class", ]$Recall)
print("Recall:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Class", ]$F1)
print("F1:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Attr", ]$Precision)
print("Precision:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Attr", ]$Recall)
print("Recall:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Attr", ]$F1)
print("F1:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Rel", ]$Precision)
print("Precision:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Rel", ]$Recall)
print("Recall:")
shapiro_test_result
print("--------------------------------")
shapiro_test_result <- shapiro.test(df_long[df_long$ElementType == "Rel", ]$F1)
print("F1:")
shapiro_test_result
print("--------------------------------")
library(lme4)
library(lmerTest)
library(car)
library(emmeans)
df <- df_long[df_long$ElementType == "Class", ]
head(df)
class_precision <- lm(Precision ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(class_precision)
print("----------------------")
qqnorm(residuals(class_precision))
qqline(residuals(class_precision),col="red")
leveneTest(residuals(class_precision) ~ Divide * Pre_Model, data=df)
print("----------------------")
print("Pre_Model")
emmeans(class_precision, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(class_precision, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(class_precision, pairwise ~ Pre_Model | Divide)$contrasts
df <- df_long[df_long$ElementType == "Class", ]
head(df)
class_recall <- aov(Recall ~ Pre_Model * Divide + DSL2Gen + Shot_Example, data = df)
anova(class_recall)
print("----------------------")
print("Pre_Model")
emmeans(class_recall, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(class_recall, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(class_recall, pairwise ~ Pre_Model | Divide)$contrasts
df <- df_long[df_long$ElementType == "Class", ]
head(df)
class_F1 <- aov(F1 ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(class_F1)
print("----------------------")
print("Pre_Model")
emmeans(class_F1, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(class_F1, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(class_F1, pairwise ~ Pre_Model | Divide)$contrasts
df <- df_long[df_long$ElementType == "Attr", ]
head(df)
attr_precision <- aov(Precision ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(attr_precision)
print("----------------------")
print("Pre_Model")
emmeans(attr_precision, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(attr_precision, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(attr_precision, pairwise ~ Pre_Model | Divide)$contrasts
library(emmeans)
df <- df_long[df_long$ElementType == "Attr", ]
head(df)
attr_recall <- aov(Recall ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(attr_recall)
print("----------------------")
print("Pre_Model")
emmeans(attr_recall, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(attr_recall, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(attr_recall, pairwise ~ Pre_Model | Divide)$contrasts
library(emmeans)
df <- df_long[df_long$ElementType == "Attr", ]
head(df)
attr_F1 <- aov(F1 ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(attr_F1)
print("----------------------")
print("Pre_Model")
emmeans(attr_F1, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(attr_F1, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(attr_F1, pairwise ~ Pre_Model | Divide)$contrasts
df <- df_long[df_long$ElementType == "Rel", ]
head(df)
rel_precision <- aov(Precision ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(rel_precision)
print("----------------------")
print("Pre_Model")
emmeans(rel_precision, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(rel_precision, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(rel_precision, pairwise ~ Pre_Model | Divide)$contrasts
df <- df_long[df_long$ElementType == "Rel", ]
head(df)
rel_recall <- aov(Recall ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(rel_recall)
print("----------------------")
print("Pre_Model")
emmeans(rel_recall, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(rel_recall, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(rel_recall, pairwise ~ Pre_Model | Divide)$contrasts
df <- df_long[df_long$ElementType == "Rel", ]
head(df)
rel_f1 <- aov(F1 ~ Divide * Pre_Model + DSL2Gen + Shot_Example, data = df)
summary(rel_f1)
print("----------------------")
print("Pre_Model")
emmeans(rel_f1, pairwise ~ Pre_Model)$contrasts
print("Divide")
emmeans(rel_f1, pairwise ~ Divide)$contrasts
print("Pre_Model | Divide")
emmeans(rel_f1, pairwise ~ Pre_Model | Divide)$contrasts
