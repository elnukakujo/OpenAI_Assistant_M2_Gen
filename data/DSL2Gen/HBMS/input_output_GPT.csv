LLM_name,Prompt,Output,Solution,OutputEcore,SolutionEcore
gpt-3.5-turbo,"Description: A city is using the Bus Transportation Management System (BTMS) to simplify the day-to-day activities related to the city’s public bus system.

The BTMS keeps track of a driver’s name and automatically assigns a unique ID to each driver. A bus route is identified by a unique number that is determined by city staff, while a bus is identified by its unique licence plate. The highest possible number for a bus route is 9999, while a licence plate number may be up to 10 characters long, inclusive. For up to a year in advance, city staff assigns buses to routes. Several buses may be assigned to a route per day. Each bus serves at the most one route per day but may be assigned to different routes on different days. Similarly, for up to a year in advance, city staff posts the schedule for its bus drivers. For each route, there is a morning shift, an afternoon shift, and a night shift. A driver is assigned by city staff to a shift for a particular bus on a particular day. The BTMS offers city staff great flexibility, i.e., there are no restrictions in terms of how many shifts a bus driver has per day. It is even possible to assign a bus driver to two shifts at the same time.

The current version of BTMS does not support the information of bus drivers or buses to be updated – only adding and deleting is supported. However, BTMS does support indicating whether a bus driver is on sick leave and whether a bus is in the repair shop. If that is the case, the driver cannot be scheduled or the bus cannot be assigned to a route. For a given day, an overview shows – for each route number – the licence plate number of each assigned bus, the entered shifts and the IDs and names of the assigned drivers. If a driver is currently sick or a bus is in the repair shop, the driver or bus, respectively, is highlighted in the overview.

Enumerations: 
Shift(morning, afternoon, night)

Classes: 
BTMS(contain (*) BusVehicle, contain (*) Route, contain (*) RouteAssignment, contain (*) Driver, contain (*) DriverSchedule)
BusVehicle(string licencePlate, boolean inRepairShop, associate (*) RouteAssignment)
Route(int number, associate (*) RouteAssignment)
RouteAssignment(Date date, associate (*) DriverSchedule)
Driver(string name, string id, boolean onSickLeave, associate (*) DriverSchedule)
DriverSchedule(Shift shift)


Description: The Helping Hand Store (H2S) collects second hand articles and non-perishable foods from residents. A resident enters a name, street address, phone number, optional email address, as well as a description of the items to be picked up. 

At the beginning of every weekday, a pickup route for that day is determined for each vehicle for which a volunteer driver is available. Volunteer drivers indicate their available days on the H2S website. The route takes into account the available storage space of a vehicle and the dimensions and weights of scheduled items. After completing all scheduled pickups, the driver drops off all collected second hand articles at H2S’s distribution center. Those articles that can still be used are tagged with an RFID device. In addition, the H2S employee assigns a category to the article from a standard list of 134 categories (e.g., baby clothing, women’s winter boots, fridge, microwave…). 

H2S allows those clients to indicate which categories of articles they need. An H2S employee calls them to let them know about the relevant articles that were dropped off that day. Delivery of such articles is made by a volunteer driver before picking up items according to the pickup route.

Enumerations:
ItemCategory(Baby Clothing, Fridge, ...)

Classes:
H2S(contain (*) Item, contain (*) Route, contain (*) UserRole, contain (*) Person)
Person(string name, string address, string phoneNumber, string emailAddress, associate (*) UserRole, )
abstract UserRole()
Volunteer(contain (*) Date, inherit UserRole, associate (*) Route) 
Resident(inherit UserRole, associate (*) Item)
SecondHandArticle(string codeRFID, boolean discarded, ItemCategory category, inherit Item)
abstract Item(string description, string dimension, int weight, Date requestedPickedDate)
Route(Date date, associate (*) Item, associate (*) SecondHandArticle)


Description: The LabTracker software helps (i) doctors manage the requisition of tests and examinations for patients and (ii) patients book appointments for tests and examinations at a lab. For the remainder of this description, tests and examinations are used interchangeably. 

For a requisition, a doctor must provide their numeric practitioner number and signature for verification as well as their full name, their address, and their phone number. The signature is a digital signature, i.e., an image of the actual signature of the doctor. Furthermore, the doctor indicates the date from which the requisition is valid. The requisition must also show the patient’s information including their alpha-numeric health number, first name and last name, date of birth, address, and phone number. A doctor cannot prescribe a test for themselves but can prescribe tests to someone else who is a doctor. 

Several tests can be combined on one requisition but only if they belong to the same group of tests. For example, only blood tests can be combined on one requisition or only ultrasound examinations can be combined. It is not possible to have a blood test and an ultrasound examination on the same requisition. For each test, its duration is defined by the lab network, so that it is possible to schedule appointments accordingly. The duration of a test is the same at each lab. For some kinds of tests, it does not matter how many tests are performed. They take as long as a single test. For example, several blood tests can be performed on a blood sample, i.e., it takes as long to draw the blood sample for a single blood test as it does for several blood tests. 

A doctor may also indicate that the tests on a requisition are to be repeated for a specified number of times and interval. The interval is either weekly, monthly, every half year, or yearly. All tests on a requisition are following the same repetition pattern. 

The doctor and the patient can view the results of each test (either negative or positive) as well as the accompanying report. 

A patient is required to make an appointment for some tests while others are walk-in only. For example, x-ray examinations require an appointment, but blood tests are walk-in only (i.e., it is not possible to make an appointment for a blood test). On the other hand, some tests only require a sample to be dropped off (e.g., a urine or stool sample). 

To make an appointment for a requisition, a patient selects the desired lab based on the lab’s address and business hours. For requisitions with repeated tests, a patient is only allowed to make one appointment at a time. The confirmation for an appointment also shows a confirmation number, the date as well as start/end times, and the name of the lab as well as its registration number. It is possible to change or cancel an appointment at any time but doing so within 24 hours of the appointment incurs a change/cancellation fee. Each lab determines its own fee and business hours. All labs are open every day of the year and offer all tests. The business hours of a lab do not change from one week to the next. Each day a lab is open from the day’s start time to its end time, i.e., there are no breaks. 

Enumerations:
Interval(weekly, monthly, everyHalfYear, yearly)
AccessType(reservable, walkIn, dropOff)
DayOfWeek(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)

Classes:
LabTracker(contain (*) Person, contain (*) PersonRole, contain (*) Requisition, contain (*) TestResult, contain (*) SpecificTest,
contain (*) Appointment, contain (*) BusinessHour, contain (*) Lab, contain (*) Test, contain (*) TestType)
Person(string lastName, string firstName, string address, string phoneNumber, associate (0..2) PersonRole)
abstract PersonRole(idNumber)
Patient(string dateOfBirth, inherit PersonRole, associate (*) Requisition)
Doctor(string signature, inherit PersonRole, associate (*) Requisition)
Requisition(string effectiveDate, int repetitionCount, Interval repetitionInterval, associate (*) Appointment, 
associate (*) SpecificTest)
TestResult(boolean negative, string report, associate (*) SpecificTest)
SpecificTest(Data date)
Appointment(string confirmation, Date date, string startTime, string endTime, associate (*) Requisition)
BusinessHour(DayOfWeek: dayOfWeek, string startTime, string endTime)
Lab(string registrationNumber, string name, string address, boolean changeCancelFee, associate (*) Appointment, associate (7) BusinessHour)
Test(string name, string duration, associate (*) SpecificTest)
TestType(string name, string durationAdditive, AccessType access, associate (*) Test)
### 
Base model:
Enumerations:
RoomType(single, double, twin)
HotelRating(1, 2, 3, 4, 5)

Classes:
HBMS(contain (*) Traveller, contain (*) Hotel, contain (*) Booking)
Traveller(string name, string billingInformation, string company, string address, string travelPreferences, string creditCardInformation, float reliabilityRating, boolean prePaid)
Hotel(string name, string city, string address, string hotelChain, contain (*) RoomTypeAvailability, contain (*) SpecialOffer, associate (0..*) Booking, associate (*) CompetitorHotel)
RoomTypeAvailability(RoomType type, int availableRooms)
SpecialOffer(float price, string cityArea, HotelRating hotelRating, string bookingPreferences, string uniqueBookingID)
Booking(Date arrivalDate, Date departureDate, int numberOfRooms, RoomType roomType, HotelRating minHotelRating, float maxCostPerNight, string furtherTravelPreferences, associate (*) Hotel, associate (*) Confirmation)
Confirmation(boolean confirmed, Date confirmationDate, Date cancellationDeadline)
CompetitorHotel
Task instructions: Using the previous model as a base, generate the lists of model classes and associations from the following given description.
Description:
Hotel Booking Management System (HBMS)

Business travellers use HMBS for booking special accommodation deals offered by participating hotels. Travellers register to HBMS by providing their name, billing information (incl. company name and address) and optional travel preferences (e.g. breakfast included, free wifi, 24/7 front desk, etc.).

When searching for accommodation, the traveller specifies the city, the date of arrival and departure, the number of needed rooms and the type of rooms (e.g. single, double, twin), minimum hotel rating (stars), a tentative budget (max. cost per night), and optionally, further travel preferences to filter offers in the search results. HBMS lists all available offers of hotels for the given travel period, and the traveller can either create a preliminary booking or complete a booking in the regular way.

In case of a preliminary booking, HBMS forwards the key parameters of the booking information (i.e. price, city area, hotel rating and key preferences and a unique booking identifier) to other hotels so that they can compete for the traveller with special offers provided within the next 24 hours. After 24-hour deadline, HBMS sends the five best special offers to the traveller who can switch to the new offer or proceed with the original preliminary booking.

In both cases, the traveller needs to provide credit card information to finalize a booking. Each finalized booking can be either pre-paid (i.e. paid immediately when it cannot be reimbursed), or paid at hotel (when the traveller pays during his/her stay). A finalized booking needs to be confirmed by the hotel within 24 hours. A booking may also contain a cancellation deadline: if the traveller cancels a confirmed booking before this deadline, then there are no further consequences. However, if a confirmed booking is cancelled after this deadline, then 1-night accommodation is charged for the traveller. HBMS stores all past booking information for a traveller to calculate a reliability rating.

Each hotel is located in a city at a particular address, and possibly run by a hotel chain. A hotel may announce its available types of rooms for a given period in HBMS, and may also inform HBMS when a particular type of room is fully booked. HBMS sends information about the preliminary booking information to competitor hotels together with the traveller’s preferences and his/her reliability rating. The competitor hotels may then provide a special offer. Once a booking is finalized, the hotel needs to send a confirmation to the traveller. If a completed booking is not confirmed by the hotel within 24 hours, then HBMS needs to cancel it, and reimburse the traveller in case of a pre-paid booking. If the hotel needs to cancel a confirmed booking, then financial compensation must be offered to the traveller.","Enumerations: 
- RoomType(single, double, twin)
- HotelRating(1, 2, 3, 4, 5)

Classes:
- HBMS(contain (*) Traveller, contain (*) Hotel, contain (*) Booking)
- Traveller(string name, string billingInformation, string company, string address, string travelPreferences, string creditCardInformation, float reliabilityRating, boolean prePaid, associate (0..*) Booking)
- Hotel(string name, string city, string address, string hotelChain, associate (*) RoomTypeAvailability, associate (*) SpecialOffer, associate (0..*) Booking, associate (*) CompetitorHotel)
- RoomTypeAvailability(RoomType type, int availableRooms)
- SpecialOffer(float price, string cityArea, HotelRating hotelRating, string bookingPreferences, string uniqueBookingID, associate (*) Hotel, associate (*) Confirmation)
- Booking(Date arrivalDate, Date departureDate, int numberOfRooms, RoomType roomType, HotelRating minHotelRating, float maxCostPerNight, string furtherTravelPreferences, associate (*) Hotel, associate (*) Confirmation)
- Confirmation(boolean confirmed, Date confirmationDate, Date cancellationDeadline, associate (*) Booking)
- CompetitorHotel","Enumerations:
RoomType(SINGLE, DOUBLE, TWIN)
BookingStatus(FINALIZED, CONFIRMED, CANCELLED_BY_HBMS, PRELIMINARY, CANCELLED_BY_TRAVELLER, CANCELLED_BY_HOTEL)
PaymentType(PREPAID, PAID_AT_HOTEL)

Classes:
HotelChain(contain (*) Hotel, )
HotelBookingManager(contain (*) HotelChain, contain (*) Traveller, contain (*) TravelPreference, contain (1) BillingInformation)
Traveller(string name, int reliabilityRating, contain (*) TravelSearch, associate (*) Booking)
BillingInformation(string companyName, string address)
TravelPreference(string preference, string value)
Hotel(string city, string country, string area, RoomAvailability availability, contain (*) Offer, contain (*) RoomAvailability,
associate (*) Booking)
abstract Offer()
SpecialOffer(inherit Offer, associate (1) BookingInfo)
RegularOffer(inherit Offer, associate (*) TravelSearch)
TravelSearch(contain (1) SearchInfo, contain (*) TravelPreference, associate (*) RegularOffer)
SearchInfo(inherit TripInfo)
RoomAvailability(inherit TripInfo)
abstract TripInfo(int numberOfRooms, RoomType roomType, date arrivalDate, date departureDate, float budgetPerNight)
BookingInfo(inherit TripInfo, associate (0..5) SpecialOffer)
Booking(int bookingId, date cancellationDeadline, string creditCardNumber, BookingStatus bookingStatus, PaymentType paymentType, 
date confirmationDate, float paidAmount, contain (1) BookingInfo, associate (0..1) Offer)","<?xml version=""1.0"" encoding=""UTF-8""?>
<ecore:EPackage xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" name=""ClassDiagram"" nsURI=""http://www.example.com/ClassDiagram""
    nsPrefix=""ClassDiagram"">
  <eClassifiers xsi:type=""ecore:EEnum"" name=""RoomType"">
    <eLiterals name=""single""/>
    <eLiterals name=""double""/>
    <eLiterals name=""twin""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""HotelRating"">
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""HBMS"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Traveller"" eType=""#//Traveller"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""true"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Traveller"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""billingInformation"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""company"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""address"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""travelPreferences"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""creditCardInformation"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""reliabilityRating"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""prePaid"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" lowerBound=""0"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Hotel"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""city"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""address"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""hotelChain"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""RoomTypeAvailability"" eType=""#//RoomTypeAvailability"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""SpecialOffer"" eType=""#//SpecialOffer"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" lowerBound=""0"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""CompetitorHotel"" eType=""#//CompetitorHotel"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""RoomTypeAvailability"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""type"" eType=""#//RoomType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""availableRooms"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""SpecialOffer"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""price"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""cityArea"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""hotelRating"" eType=""#//HotelRating""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""bookingPreferences"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""uniqueBookingID"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Confirmation"" eType=""#//Confirmation"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Booking"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""arrivalDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""departureDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""numberOfRooms"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""roomType"" eType=""#//RoomType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""minHotelRating"" eType=""#//HotelRating""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""maxCostPerNight"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""furtherTravelPreferences"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Confirmation"" eType=""#//Confirmation"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Confirmation"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""confirmed"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""confirmationDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""cancellationDeadline"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""CompetitorHotel"">
  </eClassifiers>
</ecore:EPackage>","<?xml version=""1.0"" encoding=""UTF-8""?>
<ecore:EPackage xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" name=""ClassDiagram"" nsURI=""http://www.example.com/ClassDiagram""
    nsPrefix=""ClassDiagram"">
  <eClassifiers xsi:type=""ecore:EEnum"" name=""RoomType"">
    <eLiterals name=""SINGLE""/>
    <eLiterals name=""DOUBLE""/>
    <eLiterals name=""TWIN""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""BookingStatus"">
    <eLiterals name=""FINALIZED""/>
    <eLiterals name=""CONFIRMED""/>
    <eLiterals name=""CANCELLED_BY_HBMS""/>
    <eLiterals name=""PRELIMINARY""/>
    <eLiterals name=""CANCELLED_BY_TRAVELLER""/>
    <eLiterals name=""CANCELLED_BY_HOTEL""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""PaymentType"">
    <eLiterals name=""PREPAID""/>
    <eLiterals name=""PAID_AT_HOTEL""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""HotelChain"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""true"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""HotelBookingManager"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""HotelChain"" eType=""#//HotelChain"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Traveller"" eType=""#//Traveller"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelPreference"" eType=""#//TravelPreference"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""BillingInformation"" eType=""#//BillingInformation"" containment=""true"" upperBound=""1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Traveller"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""reliabilityRating"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelSearch"" eType=""#//TravelSearch"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""BillingInformation"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""companyName"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""address"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""TravelPreference"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""preference"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""value"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Hotel"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""city"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""country"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""area"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""availability"" eType=""#//RoomAvailability""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""RoomAvailability"" eType=""#//RoomAvailability"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Offer"" abstract=""true"">
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""SpecialOffer"">
    <eSuperTypes href=""#//Offer""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""BookingInfo"" eType=""#//BookingInfo"" containment=""false"" upperBound=""1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""RegularOffer"">
    <eSuperTypes href=""#//Offer""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelSearch"" eType=""#//TravelSearch"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""TravelSearch"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""SearchInfo"" eType=""#//SearchInfo"" containment=""true"" upperBound=""1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelPreference"" eType=""#//TravelPreference"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""RegularOffer"" eType=""#//RegularOffer"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""SearchInfo"">
    <eSuperTypes href=""#//TripInfo""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""RoomAvailability"">
    <eSuperTypes href=""#//TripInfo""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""TripInfo"" abstract=""true"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""numberOfRooms"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""roomType"" eType=""#//RoomType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""arrivalDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""departureDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""budgetPerNight"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""BookingInfo"">
    <eSuperTypes href=""#//TripInfo""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""SpecialOffer"" eType=""#//SpecialOffer"" containment=""false"" lowerBound=""0"" upperBound=""5""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Booking"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""bookingId"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""cancellationDeadline"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""creditCardNumber"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""bookingStatus"" eType=""#//BookingStatus""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""paymentType"" eType=""#//PaymentType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""confirmationDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""paidAmount"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""BookingInfo"" eType=""#//BookingInfo"" containment=""true"" upperBound=""1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""false"" lowerBound=""0"" upperBound=""1""/>
  </eClassifiers>
</ecore:EPackage>"
gpt-4,"Description: A city is using the Bus Transportation Management System (BTMS) to simplify the day-to-day activities related to the city’s public bus system.

The BTMS keeps track of a driver’s name and automatically assigns a unique ID to each driver. A bus route is identified by a unique number that is determined by city staff, while a bus is identified by its unique licence plate. The highest possible number for a bus route is 9999, while a licence plate number may be up to 10 characters long, inclusive. For up to a year in advance, city staff assigns buses to routes. Several buses may be assigned to a route per day. Each bus serves at the most one route per day but may be assigned to different routes on different days. Similarly, for up to a year in advance, city staff posts the schedule for its bus drivers. For each route, there is a morning shift, an afternoon shift, and a night shift. A driver is assigned by city staff to a shift for a particular bus on a particular day. The BTMS offers city staff great flexibility, i.e., there are no restrictions in terms of how many shifts a bus driver has per day. It is even possible to assign a bus driver to two shifts at the same time.

The current version of BTMS does not support the information of bus drivers or buses to be updated – only adding and deleting is supported. However, BTMS does support indicating whether a bus driver is on sick leave and whether a bus is in the repair shop. If that is the case, the driver cannot be scheduled or the bus cannot be assigned to a route. For a given day, an overview shows – for each route number – the licence plate number of each assigned bus, the entered shifts and the IDs and names of the assigned drivers. If a driver is currently sick or a bus is in the repair shop, the driver or bus, respectively, is highlighted in the overview.

Enumerations: 
Shift(morning, afternoon, night)

Classes: 
BTMS(contain (*) BusVehicle, contain (*) Route, contain (*) RouteAssignment, contain (*) Driver, contain (*) DriverSchedule)
BusVehicle(string licencePlate, boolean inRepairShop, associate (*) RouteAssignment)
Route(int number, associate (*) RouteAssignment)
RouteAssignment(Date date, associate (*) DriverSchedule)
Driver(string name, string id, boolean onSickLeave, associate (*) DriverSchedule)
DriverSchedule(Shift shift)


Description: The Helping Hand Store (H2S) collects second hand articles and non-perishable foods from residents. A resident enters a name, street address, phone number, optional email address, as well as a description of the items to be picked up. 

At the beginning of every weekday, a pickup route for that day is determined for each vehicle for which a volunteer driver is available. Volunteer drivers indicate their available days on the H2S website. The route takes into account the available storage space of a vehicle and the dimensions and weights of scheduled items. After completing all scheduled pickups, the driver drops off all collected second hand articles at H2S’s distribution center. Those articles that can still be used are tagged with an RFID device. In addition, the H2S employee assigns a category to the article from a standard list of 134 categories (e.g., baby clothing, women’s winter boots, fridge, microwave…). 

H2S allows those clients to indicate which categories of articles they need. An H2S employee calls them to let them know about the relevant articles that were dropped off that day. Delivery of such articles is made by a volunteer driver before picking up items according to the pickup route.

Enumerations:
ItemCategory(Baby Clothing, Fridge, ...)

Classes:
H2S(contain (*) Item, contain (*) Route, contain (*) UserRole, contain (*) Person)
Person(string name, string address, string phoneNumber, string emailAddress, associate (*) UserRole, )
abstract UserRole()
Volunteer(contain (*) Date, inherit UserRole, associate (*) Route) 
Resident(inherit UserRole, associate (*) Item)
SecondHandArticle(string codeRFID, boolean discarded, ItemCategory category, inherit Item)
abstract Item(string description, string dimension, int weight, Date requestedPickedDate)
Route(Date date, associate (*) Item, associate (*) SecondHandArticle)


Description: The LabTracker software helps (i) doctors manage the requisition of tests and examinations for patients and (ii) patients book appointments for tests and examinations at a lab. For the remainder of this description, tests and examinations are used interchangeably. 

For a requisition, a doctor must provide their numeric practitioner number and signature for verification as well as their full name, their address, and their phone number. The signature is a digital signature, i.e., an image of the actual signature of the doctor. Furthermore, the doctor indicates the date from which the requisition is valid. The requisition must also show the patient’s information including their alpha-numeric health number, first name and last name, date of birth, address, and phone number. A doctor cannot prescribe a test for themselves but can prescribe tests to someone else who is a doctor. 

Several tests can be combined on one requisition but only if they belong to the same group of tests. For example, only blood tests can be combined on one requisition or only ultrasound examinations can be combined. It is not possible to have a blood test and an ultrasound examination on the same requisition. For each test, its duration is defined by the lab network, so that it is possible to schedule appointments accordingly. The duration of a test is the same at each lab. For some kinds of tests, it does not matter how many tests are performed. They take as long as a single test. For example, several blood tests can be performed on a blood sample, i.e., it takes as long to draw the blood sample for a single blood test as it does for several blood tests. 

A doctor may also indicate that the tests on a requisition are to be repeated for a specified number of times and interval. The interval is either weekly, monthly, every half year, or yearly. All tests on a requisition are following the same repetition pattern. 

The doctor and the patient can view the results of each test (either negative or positive) as well as the accompanying report. 

A patient is required to make an appointment for some tests while others are walk-in only. For example, x-ray examinations require an appointment, but blood tests are walk-in only (i.e., it is not possible to make an appointment for a blood test). On the other hand, some tests only require a sample to be dropped off (e.g., a urine or stool sample). 

To make an appointment for a requisition, a patient selects the desired lab based on the lab’s address and business hours. For requisitions with repeated tests, a patient is only allowed to make one appointment at a time. The confirmation for an appointment also shows a confirmation number, the date as well as start/end times, and the name of the lab as well as its registration number. It is possible to change or cancel an appointment at any time but doing so within 24 hours of the appointment incurs a change/cancellation fee. Each lab determines its own fee and business hours. All labs are open every day of the year and offer all tests. The business hours of a lab do not change from one week to the next. Each day a lab is open from the day’s start time to its end time, i.e., there are no breaks. 

Enumerations:
Interval(weekly, monthly, everyHalfYear, yearly)
AccessType(reservable, walkIn, dropOff)
DayOfWeek(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)

Classes:
LabTracker(contain (*) Person, contain (*) PersonRole, contain (*) Requisition, contain (*) TestResult, contain (*) SpecificTest,
contain (*) Appointment, contain (*) BusinessHour, contain (*) Lab, contain (*) Test, contain (*) TestType)
Person(string lastName, string firstName, string address, string phoneNumber, associate (0..2) PersonRole)
abstract PersonRole(idNumber)
Patient(string dateOfBirth, inherit PersonRole, associate (*) Requisition)
Doctor(string signature, inherit PersonRole, associate (*) Requisition)
Requisition(string effectiveDate, int repetitionCount, Interval repetitionInterval, associate (*) Appointment, 
associate (*) SpecificTest)
TestResult(boolean negative, string report, associate (*) SpecificTest)
SpecificTest(Data date)
Appointment(string confirmation, Date date, string startTime, string endTime, associate (*) Requisition)
BusinessHour(DayOfWeek: dayOfWeek, string startTime, string endTime)
Lab(string registrationNumber, string name, string address, boolean changeCancelFee, associate (*) Appointment, associate (7) BusinessHour)
Test(string name, string duration, associate (*) SpecificTest)
TestType(string name, string durationAdditive, AccessType access, associate (*) Test)
### 
Task instructions: Generate the lists of model classes and associations from the following given description.
Description:
Hotel Booking Management System (HBMS)

Business travellers use HMBS for booking special accommodation deals offered by participating hotels. Travellers register to HBMS by providing their name, billing information (incl. company name and address) and optional travel preferences (e.g. breakfast included, free wifi, 24/7 front desk, etc.).

When searching for accommodation, the traveller specifies the city, the date of arrival and departure, the number of needed rooms and the type of rooms (e.g. single, double, twin), minimum hotel rating (stars), a tentative budget (max. cost per night), and optionally, further travel preferences to filter offers in the search results. HBMS lists all available offers of hotels for the given travel period, and the traveller can either create a preliminary booking or complete a booking in the regular way.

In case of a preliminary booking, HBMS forwards the key parameters of the booking information (i.e. price, city area, hotel rating and key preferences and a unique booking identifier) to other hotels so that they can compete for the traveller with special offers provided within the next 24 hours. After 24-hour deadline, HBMS sends the five best special offers to the traveller who can switch to the new offer or proceed with the original preliminary booking.

In both cases, the traveller needs to provide credit card information to finalize a booking. Each finalized booking can be either pre-paid (i.e. paid immediately when it cannot be reimbursed), or paid at hotel (when the traveller pays during his/her stay). A finalized booking needs to be confirmed by the hotel within 24 hours. A booking may also contain a cancellation deadline: if the traveller cancels a confirmed booking before this deadline, then there are no further consequences. However, if a confirmed booking is cancelled after this deadline, then 1-night accommodation is charged for the traveller. HBMS stores all past booking information for a traveller to calculate a reliability rating.

Each hotel is located in a city at a particular address, and possibly run by a hotel chain. A hotel may announce its available types of rooms for a given period in HBMS, and may also inform HBMS when a particular type of room is fully booked. HBMS sends information about the preliminary booking information to competitor hotels together with the traveller’s preferences and his/her reliability rating. The competitor hotels may then provide a special offer. Once a booking is finalized, the hotel needs to send a confirmation to the traveller. If a completed booking is not confirmed by the hotel within 24 hours, then HBMS needs to cancel it, and reimburse the traveller in case of a pre-paid booking. If the hotel needs to cancel a confirmed booking, then financial compensation must be offered to the traveller.","Enumerations:
TravelPreference(breakfastIncluded, freeWifi, frontDesk24h)
RoomType(single, double, twin)
PaymentType(prePaid, paidAtHotel)

Classes:
HBMS(contain (*) Traveller, contain (*) TravelPreference, contain (*) Booking, contain (*) Offer, contain (*) Hotel)
Traveller(string name, string billingInformation, string companyName, string address, associate (*) TravelPreference,
           associate (*) Booking)
Booking(Date arrival, Date departure, int numberOfRooms, RoomType roomType, double maxCostPerNight, int hotelRating,
        PaymentType paymentType, boolean confirmed, associate (*) Offer, associate (*) Traveller)
Offer(double price, string cityArea, int rating, associate (*) Booking, associate (*) Hotel)
Hotel(string name, string city, string address, associate (*) RoomType, associate (*) Offer,
      associate (*) Booking)","Enumerations:
RoomType(SINGLE, DOUBLE, TWIN)
BookingStatus(FINALIZED, CONFIRMED, CANCELLED_BY_HBMS, PRELIMINARY, CANCELLED_BY_TRAVELLER, CANCELLED_BY_HOTEL)
PaymentType(PREPAID, PAID_AT_HOTEL)

Classes:
HotelChain(contain (*) Hotel, )
HotelBookingManager(contain (*) HotelChain, contain (*) Traveller, contain (*) TravelPreference, contain (1) BillingInformation)
Traveller(string name, int reliabilityRating, contain (*) TravelSearch, associate (*) Booking)
BillingInformation(string companyName, string address)
TravelPreference(string preference, string value)
Hotel(string city, string country, string area, RoomAvailability availability, contain (*) Offer, contain (*) RoomAvailability,
associate (*) Booking)
abstract Offer()
SpecialOffer(inherit Offer, associate (1) BookingInfo)
RegularOffer(inherit Offer, associate (*) TravelSearch)
TravelSearch(contain (1) SearchInfo, contain (*) TravelPreference, associate (*) RegularOffer)
SearchInfo(inherit TripInfo)
RoomAvailability(inherit TripInfo)
abstract TripInfo(int numberOfRooms, RoomType roomType, date arrivalDate, date departureDate, float budgetPerNight)
BookingInfo(inherit TripInfo, associate (0..5) SpecialOffer)
Booking(int bookingId, date cancellationDeadline, string creditCardNumber, BookingStatus bookingStatus, PaymentType paymentType, 
date confirmationDate, float paidAmount, contain (1) BookingInfo, associate (0..1) Offer)","<?xml version=""1.0"" encoding=""UTF-8""?>
<ecore:EPackage xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" name=""ClassDiagram"" nsURI=""http://www.example.com/ClassDiagram""
    nsPrefix=""ClassDiagram"">
  <eClassifiers xsi:type=""ecore:EEnum"" name=""TravelPreference"">
    <eLiterals name=""breakfastIncluded""/>
    <eLiterals name=""freeWifi""/>
    <eLiterals name=""frontDesk24h""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""RoomType"">
    <eLiterals name=""single""/>
    <eLiterals name=""double""/>
    <eLiterals name=""twin""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""PaymentType"">
    <eLiterals name=""prePaid""/>
    <eLiterals name=""paidAtHotel""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""HBMS"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Traveller"" eType=""#//Traveller"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelPreference"" eType=""#//TravelPreference"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""true"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Traveller"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""billingInformation"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""companyName"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""address"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelPreference"" eType=""#//TravelPreference"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Booking"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""arrival"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""departure"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""numberOfRooms"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""roomType"" eType=""#//RoomType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""maxCostPerNight"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""hotelRating"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""paymentType"" eType=""#//PaymentType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""confirmed"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Traveller"" eType=""#//Traveller"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Offer"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""price"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""cityArea"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""rating"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Hotel"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""city"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""address"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""RoomType"" eType=""#//RoomType"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""false"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
</ecore:EPackage>","<?xml version=""1.0"" encoding=""UTF-8""?>
<ecore:EPackage xmi:version=""2.0"" xmlns:xmi=""http://www.omg.org/XMI"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
    xmlns:ecore=""http://www.eclipse.org/emf/2002/Ecore"" name=""ClassDiagram"" nsURI=""http://www.example.com/ClassDiagram""
    nsPrefix=""ClassDiagram"">
  <eClassifiers xsi:type=""ecore:EEnum"" name=""RoomType"">
    <eLiterals name=""SINGLE""/>
    <eLiterals name=""DOUBLE""/>
    <eLiterals name=""TWIN""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""BookingStatus"">
    <eLiterals name=""FINALIZED""/>
    <eLiterals name=""CONFIRMED""/>
    <eLiterals name=""CANCELLED_BY_HBMS""/>
    <eLiterals name=""PRELIMINARY""/>
    <eLiterals name=""CANCELLED_BY_TRAVELLER""/>
    <eLiterals name=""CANCELLED_BY_HOTEL""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EEnum"" name=""PaymentType"">
    <eLiterals name=""PREPAID""/>
    <eLiterals name=""PAID_AT_HOTEL""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""HotelChain"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Hotel"" eType=""#//Hotel"" containment=""true"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""HotelBookingManager"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""HotelChain"" eType=""#//HotelChain"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Traveller"" eType=""#//Traveller"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelPreference"" eType=""#//TravelPreference"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""BillingInformation"" eType=""#//BillingInformation"" containment=""true"" upperBound=""1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Traveller"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""name"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""reliabilityRating"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelSearch"" eType=""#//TravelSearch"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""BillingInformation"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""companyName"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""address"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""TravelPreference"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""preference"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""value"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Hotel"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""city"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""country"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""area"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""availability"" eType=""#//RoomAvailability""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""RoomAvailability"" eType=""#//RoomAvailability"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Booking"" eType=""#//Booking"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Offer"" abstract=""true"">
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""SpecialOffer"">
    <eSuperTypes href=""#//Offer""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""BookingInfo"" eType=""#//BookingInfo"" containment=""false"" upperBound=""1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""RegularOffer"">
    <eSuperTypes href=""#//Offer""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelSearch"" eType=""#//TravelSearch"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""TravelSearch"">
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""SearchInfo"" eType=""#//SearchInfo"" containment=""true"" upperBound=""1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""TravelPreference"" eType=""#//TravelPreference"" containment=""true"" upperBound=""-1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""RegularOffer"" eType=""#//RegularOffer"" containment=""false"" upperBound=""-1""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""SearchInfo"">
    <eSuperTypes href=""#//TripInfo""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""RoomAvailability"">
    <eSuperTypes href=""#//TripInfo""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""TripInfo"" abstract=""true"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""numberOfRooms"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""roomType"" eType=""#//RoomType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""arrivalDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""departureDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""budgetPerNight"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""BookingInfo"">
    <eSuperTypes href=""#//TripInfo""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""SpecialOffer"" eType=""#//SpecialOffer"" containment=""false"" lowerBound=""0"" upperBound=""5""/>
  </eClassifiers>
  <eClassifiers xsi:type=""ecore:EClass"" name=""Booking"">
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""bookingId"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""cancellationDeadline"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""creditCardNumber"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""bookingStatus"" eType=""#//BookingStatus""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""paymentType"" eType=""#//PaymentType""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""confirmationDate"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate""/>
    <eStructuralFeatures xsi:type=""ecore:EAttribute"" name=""paidAmount"" eType=""ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""BookingInfo"" eType=""#//BookingInfo"" containment=""true"" upperBound=""1""/>
    <eStructuralFeatures xsi:type=""ecore:EReference"" name=""Offer"" eType=""#//Offer"" containment=""false"" lowerBound=""0"" upperBound=""1""/>
  </eClassifiers>
</ecore:EPackage>"
