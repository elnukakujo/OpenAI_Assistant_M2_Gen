{
    "prompt_ex": [
        [
            "Description: A city is using the Bus Transportation Management System (BTMS) to simplify the day-to-day activities related to the city\u2019s public bus system.\n\nThe BTMS keeps track of a driver\u2019s name and automatically assigns a unique ID to each driver. A bus route is identified by a unique number that is determined by city staff, while a bus is identified by its unique licence plate. The highest possible number for a bus route is 9999, while a licence plate number may be up to 10 characters long, inclusive. For up to a year in advance, city staff assigns buses to routes. Several buses may be assigned to a route per day. Each bus serves at the most one route per day but may be assigned to different routes on different days. Similarly, for up to a year in advance, city staff posts the schedule for its bus drivers. For each route, there is a morning shift, an afternoon shift, and a night shift. A driver is assigned by city staff to a shift for a particular bus on a particular day. The BTMS offers city staff great flexibility, i.e., there are no restrictions in terms of how many shifts a bus driver has per day. It is even possible to assign a bus driver to two shifts at the same time.\n\nThe current version of BTMS does not support the information of bus drivers or buses to be updated \u2013 only adding and deleting is supported. However, BTMS does support indicating whether a bus driver is on sick leave and whether a bus is in the repair shop. If that is the case, the driver cannot be scheduled or the bus cannot be assigned to a route. For a given day, an overview shows \u2013 for each route number \u2013 the licence plate number of each assigned bus, the entered shifts and the IDs and names of the assigned drivers. If a driver is currently sick or a bus is in the repair shop, the driver or bus, respectively, is highlighted in the overview.",
            {
                "enum": [
                    {
                        "name": "Shift",
                        "values": [
                            "morning",
                            "afternoon",
                            "night"
                        ]
                    }
                ],
                "class": [
                    {
                        "name": "BTMS",
                        "attributes": [],
                        "contains": [
                            {
                                "to": "BusVehicle",
                                "mul": "*"
                            },
                            {
                                "to": "BusDriver",
                                "mul": "*"
                            },
                            {
                                "to": "Route",
                                "mul": "*"
                            },
                            {
                                "to": "DriverSchedule",
                                "mul": "*"
                            },
                            {
                                "to": "RouteAssignment",
                                "mul": "*"
                            }
                        ],
                        "associate": [],
                        "inherit": []
                    },
                    {
                        "name": "BusVehicle",
                        "attributes": [
                            {
                                "name": "licencePlate",
                                "type": "string"
                            },
                            {
                                "name": "inRepairShop",
                                "type": "boolean"
                            }
                        ],
                        "contains": [],
                        "associate": [
                            {
                                "to": "RouteAssignment",
                                "mul": "*"
                            }
                        ],
                        "inherit": []
                    },
                    {
                        "name": "Route",
                        "attributes": [
                            {
                                "name": "number",
                                "type": "int"
                            }
                        ],
                        "contains": [],
                        "associate": [
                            {
                                "to": "RouteAssignment",
                                "mul": "*"
                            }
                        ],
                        "inherit": []
                    },
                    {
                        "name": "RouteAssignment",
                        "attributes": [
                            {
                                "name": "date",
                                "type": "Date"
                            }
                        ],
                        "contains": [],
                        "associate": [
                            {
                                "to": "DriverSchedule",
                                "mul": "*"
                            }
                        ],
                        "inherit": []
                    },
                    {
                        "name": "Driver",
                        "attributes": [
                            {
                                "name": "name",
                                "type": "string"
                            },
                            {
                                "name": "id",
                                "type": "string"
                            },
                            {
                                "name": "onSickLeave",
                                "type": "boolean"
                            }
                        ],
                        "contains": [],
                        "associate": [
                            {
                                "to": "DriverSchedule",
                                "mul": "*"
                            }
                        ],
                        "inherit": []
                    },
                    {
                        "name": "DriverSchedule",
                        "attributes": [
                            {
                                "name": "shift",
                                "type": "Shift"
                            }
                        ],
                        "contains": [],
                        "associate": [],
                        "inherit": []
                    }
                ]
            }
        ]
    ],
    "user_prompt": "Base model:\nEnumerations:\nActionCard(RollForExtraTurn, ConnectTwoTiles, RemoveConnectionPiece, MoveToArbitraryTile, LoseNextTurn)\nPlayerOrder(Player1, Player2, Player3, Player4)\nTileColor(White, Black)\n\nClasses:\nTileOGame(contain (1) GameBoard, contain (*) Player, contain (1) ActionCardDeck)\nGameBoard(contain (*) Tile, contain (*) ActionTile, contain (*) ConnectionPiece)\nTile(boolean isHidden, TileColor color, contain (1) ConnectionPiece)\nActionTile(int turnsAsRegularTile, inherit Tile contain (1) ActionCard)\nConnectionPiece(associate (1) Tile)\nPlayer(int playerNumber, string color, contain (1) PlayingPiece)\nPlayingPiece()\nActionCardDeck(contain (*) ActionCard)\nActionCard()\nPlayerOrder()\nTileColor()\n\nTask instructions: Using this previous low recall model as a base to work on, add more enumerations, classes, attributes and relationships from the problem description to the metamodel from the following given description. Additionally prioritize inheritance rel and enumerations when possible rather than additional attributes. For example, BigCity inherit City, rather than having a size attribute or an enumeration CitySize with Big medium, and small.\nDescription:\nThe Tile-O application first allows a game designer to design a board game and then allows players to play the game. Only one game can be played at a time and it cannot be paused or saved. The objective of the game is to find a hidden tile on the board. Two to four players take turns by moving their playing pieces along connected tiles based on the roll of a die. Each playing piece has a different color. \n\nA designer first defines the whole game including the layout of the game board. The designer places the tiles on the board and connects them with connection pieces. A tile can be connected to other tiles on its right side, left side, top side, and bottom side. At the most one tile can be connected on each side. In addition, the designer indicates the hidden tile, the starting positions of each player, as well as the location of action tiles. \n\nThe designer also defines a deck of 32 action cards by choosing from the following predefined choices: (i) roll the die for an extra turn, (ii) connect two adjacent tiles with a connection piece from the pile of 32 spare connection pieces, (iii) remove a connection piece from the board and place it in the pile of spare connection pieces, (iv) move your playing piece to an arbitrary tile that is not your current tile, and (v) lose your next turn. \n\nPlayers take turns, with Player 1 starting the game, followed by Player 2, Player 3 (if applicable), and Player 4 (if applicable). The player whose turn it is rolls the die and them moves their playing piece along connected tiles. If the player lands on any tile, the color of the tile changes from white to black to indicate that the tile has been visited during the game. If the player lands on the hidden tile, the game ends and the player wins the game. If the player lands on an action tile, the player takes the first action card from the deck of action cards and follows the instructions on the action card. In addition, the action tile turns into a regular tile for a number of turns as specified by the game designer. Players do not know whether a tile is an action tile until a player lands on it. "
}