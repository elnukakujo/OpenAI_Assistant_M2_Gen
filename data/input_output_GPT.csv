DSL_Name,Description,Prompt,Output,Expected_Output
Tile-O,"The Tile-O application first allows a game designer to design a board game and then allows players to play the game. Only one game can be played at a time and it cannot be paused or saved. The objective of the game is to find a hidden tile on the board. Two to four players take turns by moving their playing pieces along connected tiles based on the roll of a die. Each playing piece has a different color. 

A designer first defines the whole game including the layout of the game board. The designer places the tiles on the board and connects them with connection pieces. A tile can be connected to other tiles on its right side, left side, top side, and bottom side. At the most one tile can be connected on each side. In addition, the designer indicates the hidden tile, the starting positions of each player, as well as the location of action tiles. 

The designer also defines a deck of 32 action cards by choosing from the following predefined choices: (i) roll the die for an extra turn, (ii) connect two adjacent tiles with a connection piece from the pile of 32 spare connection pieces, (iii) remove a connection piece from the board and place it in the pile of spare connection pieces, (iv) move your playing piece to an arbitrary tile that is not your current tile, and (v) lose your next turn. 

Players take turns, with Player 1 starting the game, followed by Player 2, Player 3 (if applicable), and Player 4 (if applicable). The player whose turn it is rolls the die and them moves their playing piece along connected tiles. If the player lands on any tile, the color of the tile changes from white to black to indicate that the tile has been visited during the game. If the player lands on the hidden tile, the game ends and the player wins the game. If the player lands on an action tile, the player takes the first action card from the deck of action cards and follows the instructions on the action card. In addition, the action tile turns into a regular tile for a number of turns as specified by the game designer. Players do not know whether a tile is an action tile until a player lands on it. ","A city is using the Bus Transportation Management System (BTMS) to simplify the day-to-day activities related to the city’s public bus system.

The BTMS keeps track of a driver’s name and automatically assigns a unique ID to each driver. A bus route is identified by a unique number that is determined by city staff, while a bus is identified by its unique licence plate. The highest possible number for a bus route is 9999, while a licence plate number may be up to 10 characters long, inclusive. For up to a year in advance, city staff assigns buses to routes. Several buses may be assigned to a route per day. Each bus serves at the most one route per day but may be assigned to different routes on different days. Similarly, for up to a year in advance, city staff posts the schedule for its bus drivers. For each route, there is a morning shift, an afternoon shift, and a night shift. A driver is assigned by city staff to a shift for a particular bus on a particular day. The BTMS offers city staff great flexibility, i.e., there are no restrictions in terms of how many shifts a bus driver has per day. It is even possible to assign a bus driver to two shifts at the same time.

The current version of BTMS does not support the information of bus drivers or buses to be updated – only adding and deleting is supported. However, BTMS does support indicating whether a bus driver is on sick leave and whether a bus is in the repair shop. If that is the case, the driver cannot be scheduled or the bus cannot be assigned to a route. For a given day, an overview shows – for each route number – the licence plate number of each assigned bus, the entered shifts and the IDs and names of the assigned drivers. If a driver is currently sick or a bus is in the repair shop, the driver or bus, respectively, is highlighted in the overview.

Enumerations: 
Shift(morning, afternoon, night)

Classes: 
BTMS()
BusVehicle(string licencePlate, boolean inRepairShop)
Route(int number)
RouteAssignment(Date date)
Driver(string name, string id, boolean onSickLeave)
DriverSchedule(Shift shit)

Relationships:
1 BTMS contain * BusVehicle 
1 BTMS contain * Route
1 BTMS contain * RouteAssignment
1 BTMS contain * Drivers
1 BTMS contain * DriverSchedule

* RouteAssignment associate 1 BusVehicle
* RouteAssignment associate 1 Route

* DriverSchedule associate 1 Driver
* DriverSchedule associate 1 RouteAssignment
###
Description: The Helping Hand Store (H2S) collects second hand articles and non-perishable foods from residents. A resident enters a name, street address, phone number, optional email address, as well as a description of the items to be picked up. 

At the beginning of every weekday, a pickup route for that day is determined for each vehicle for which a volunteer driver is available. Volunteer drivers indicate their available days on the H2S website. The route takes into account the available storage space of a vehicle and the dimensions and weights of scheduled items. After completing all scheduled pickups, the driver drops off all collected second hand articles at H2S’s distribution center. Those articles that can still be used are tagged with an RFID device. In addition, the H2S employee assigns a category to the article from a standard list of 134 categories (e.g., baby clothing, women’s winter boots, fridge, microwave…). 

H2S allows those clients to indicate which categories of articles they need. An H2S employee calls them to let them know about the relevant articles that were dropped off that day. Delivery of such articles is made by a volunteer driver before picking up items according to the pickup route.

Enumerations:
ItemCategory(Baby Clothing, Fridge, ...)

Classes:
H2S()
Person(string name, string address, string phoneNumber, string emailAddress)
abstract UserRole()
Volunteer() 
Resident()
SecondHandArticle(string codeRFID, boolean discarded, ItemCategory category)
abstract item(string description, string dimension, int weight, Date requestedPickedDate)
Route(Date date)

Relationships:
1 H2S contain *Item
1 H2S contain *Route
1 H2S contain *UserRole
1 H2S contain *Person
1 Volunteer contain *Date

Volunteer inherit UserRole
Resident inherit UserRole
SecondHandArticle inherit Item

1 Person associate *UserRole
1 Volunteer associate * Route
0..1 Route associate *Item
0..1 Route associate *SecondHandArticle
1 Resident associate *Item
###
Description: The LabTracker software helps (i) doctors manage the requisition of tests and examinations for patients and (ii) patients book appointments for tests and examinations at a lab. For the remainder of this description, tests and examinations are used interchangeably. 

For a requisition, a doctor must provide their numeric practitioner number and signature for verification as well as their full name, their address, and their phone number. The signature is a digital signature, i.e., an image of the actual signature of the doctor. Furthermore, the doctor indicates the date from which the requisition is valid. The requisition must also show the patient’s information including their alpha-numeric health number, first name and last name, date of birth, address, and phone number. A doctor cannot prescribe a test for themselves but can prescribe tests to someone else who is a doctor. 

Several tests can be combined on one requisition but only if they belong to the same group of tests. For example, only blood tests can be combined on one requisition or only ultrasound examinations can be combined. It is not possible to have a blood test and an ultrasound examination on the same requisition. For each test, its duration is defined by the lab network, so that it is possible to schedule appointments accordingly. The duration of a test is the same at each lab. For some kinds of tests, it does not matter how many tests are performed. They take as long as a single test. For example, several blood tests can be performed on a blood sample, i.e., it takes as long to draw the blood sample for a single blood test as it does for several blood tests. 

A doctor may also indicate that the tests on a requisition are to be repeated for a specified number of times and interval. The interval is either weekly, monthly, every half year, or yearly. All tests on a requisition are following the same repetition pattern. 

The doctor and the patient can view the results of each test (either negative or positive) as well as the accompanying report. 

A patient is required to make an appointment for some tests while others are walk-in only. For example, x-ray examinations require an appointment, but blood tests are walk-in only (i.e., it is not possible to make an appointment for a blood test). On the other hand, some tests only require a sample to be dropped off (e.g., a urine or stool sample). 

To make an appointment for a requisition, a patient selects the desired lab based on the lab’s address and business hours. For requisitions with repeated tests, a patient is only allowed to make one appointment at a time. The confirmation for an appointment also shows a confirmation number, the date as well as start/end times, and the name of the lab as well as its registration number. It is possible to change or cancel an appointment at any time but doing so within 24 hours of the appointment incurs a change/cancellation fee. Each lab determines its own fee and business hours. All labs are open every day of the year and offer all tests. The business hours of a lab do not change from one week to the next. Each day a lab is open from the day’s start time to its end time, i.e., there are no breaks. 

Enumerations:
Interval(weekly, monthly, everyHalfYear, yearly)
AccessType(reservable, walkIn, dropOff)
DayOfWeek(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)

Classes:
LabTracker()
Person(string lastName, string firstName, string address, string phoneNumber)
abstract PersonRole(idNumber)
Patient(string dateOfBirth)
Doctor(string signature)
Requisition(string effectiveDate, int repetitionCount, Interval repetitionInterval)
TestResult(boolean negative, string report)
SpecificTest(Data date)
Appointment(string confirmation, Date date, string startTime, string endTime)
BusinessHour(DayOfWeek: dayOfWeek, string startTime, string endTime)
Lab(string registrationNumber, string name, string address, boolean changeCancelFee)
Test(string name, string duration)
TestType(string name, string durationAdditive, AccessType access)

Relationships:
1 LabTracker contain *Person
1 LabTracker contain *PersonRole
1 LabTracker contain *Requisition
1 LabTracker contain *TestResult
1 Lab Tracker contain *SpecificTest
1 LabTracker contain *Appointment
1 LabTracker contain *BusinessHour 
1 LabTracker contain *Lab
1 LabTracker contain *Test
1 LabTracker contain *TestType

1 Patient inherit PersonRole
1 Doctor inherit PersonRole

1 Person associate 0..2 PersonRole
1 Patient associate * Requisition
* Requisition associate *Appointment
* Appointment associate 1 Lab
1 Docter associate * Requisition
1 Requsition associate *SpecificTest
0..1 TestResult associate *SpecificTest
1 Lab associate 7 Business
1 Test associate *SpecificTest
1 TestType associate * Test
### 
Generate the lists of model classes and associations from the following given description.
Description: The Tile-O application first allows a game designer to design a board game and then allows players to play the game. Only one game can be played at a time and it cannot be paused or saved. The objective of the game is to find a hidden tile on the board. Two to four players take turns by moving their playing pieces along connected tiles based on the roll of a die. Each playing piece has a different color. 

A designer first defines the whole game including the layout of the game board. The designer places the tiles on the board and connects them with connection pieces. A tile can be connected to other tiles on its right side, left side, top side, and bottom side. At the most one tile can be connected on each side. In addition, the designer indicates the hidden tile, the starting positions of each player, as well as the location of action tiles. 

The designer also defines a deck of 32 action cards by choosing from the following predefined choices: (i) roll the die for an extra turn, (ii) connect two adjacent tiles with a connection piece from the pile of 32 spare connection pieces, (iii) remove a connection piece from the board and place it in the pile of spare connection pieces, (iv) move your playing piece to an arbitrary tile that is not your current tile, and (v) lose your next turn. 

Players take turns, with Player 1 starting the game, followed by Player 2, Player 3 (if applicable), and Player 4 (if applicable). The player whose turn it is rolls the die and them moves their playing piece along connected tiles. If the player lands on any tile, the color of the tile changes from white to black to indicate that the tile has been visited during the game. If the player lands on the hidden tile, the game ends and the player wins the game. If the player lands on an action tile, the player takes the first action card from the deck of action cards and follows the instructions on the action card. In addition, the action tile turns into a regular tile for a number of turns as specified by the game designer. Players do not know whether a tile is an action tile until a player lands on it. ","Enumerations: 
Action(rollExtraTurn, connectTiles, removeConnection, moveArbitraryTile, loseNextTurn)

Classes: 
TileO()
Tile(string color, boolean isHidden, boolean isActionTile, boolean isStartPos)
Player(int id, string color)
Die()
DeckCard(int number)
Card(Action action)
ConnectionPiece()

Relationships:
1 TileO contain *Tile
1 TileO contain *Player
1 TileO contain *Die
1 TileO contain *DeckCard
1 TileO contain *Card

1 Tile associate *ConnectionPiece
1 Tile associate *Player
1 Player associate *Tile
1 DeckCard associate *Card","Enumerations:
Mode(design, game)
Color(red, blue, green, yellow)

Classes:
TileO()
Game(int currentConnectionPieces, Mode mode, const int spaceConnectionPieces=32, const int numberOfActionCards=32)
Connection()
WinTile()
Die()
Deck()
abstract Tile(int x, int y)
abstract ActionCard(string instructions)
RollDieActionCard()
ConnectTilesActionCard()
RemoveConnectionActionCard()
TeleportActionCard()
LoseTurnActionCard()
WinTile()
ActionTile()
NormalTile()
Player(int number, int turnsUntilActive, Color color)

Relationships: 
1 TileO contain *Game
1 Game contain *Tile
1 Game contain *Connection
1 Game contain 1Die
1 Game contain 1Deck
1 Game contain 0..1 Player
1 Deck contain 0..32 ActionCard

1 WinTile inherit Tile
1 ActionTile inherit Tile
1 NormalTile inherit Tile
1 RollDieActionCard inherit ActionCard
1 ConnectTilesActionCard inherit ActionCard  
1 RemoveConnectionActionCard inherit ActionCard
1 TeleportActionCard inherit ActionCard
1 LoseTurnActionCard inherit ActionCard

1 Game associate 0..1 WinTile
0..4 Connection associate 2 Tile
1 Player associate 0..1 Tile
0..4 Player associate 0..1 Tile
1 Deck associate 0..1 ActionCard"
SHAS,"A smart home automation system (SHAS) offers various users to automatically manage smart home automation tasks. A smart home (located at a physical address) consists of several rooms, each of which may contain sensor devices and actuator (controller) devices of different types (e.g. temperature sensor, movement sensor, light controller, lock controller). Each sensor and actuator have a unique device identifier. Once a new sensor or actuator is activated or deactivated, SHAS will recognize the change and update its infrastructure map.

When SHAS is operational, a sensor device periodically provides sensor readings (recording the measured value and the timestamp). Similarly, a predefined set of control commands (e.g. lockDoor, turnOnHeating) can be sent to the actuator devices with the timestamp and the status of the command (e.g. requested, completed, failed, etc.). All sensor readings and control commands for a smart home are recorded by SHAS in an activity log.

Relevant alerts in a smart home can be set up and managed by its owner by setting up automation rules. An automation rule has a precondition and an action. The precondition is a Boolean expression constructed from relational terms connected by basic Boolean operators (AND, OR, NOT). Atomic relational terms may refer to rooms, sensors, actuators, sensor readings and control commands. The action is a sequence of control commands. 
For example, a sample rule could specify:
when actualTemperature by Device #1244 in Living Room < 18 and window is closed then turnOnHeating in Living Room

Automation rules can be created, edited, activated and deactivated by owners. Only deactivated rules can be edited. Rules can also depend on or conflict with other rules, thus a complex rule hierarchy can be designed. SHAS records whenever an active rule was triggered using a timestamp.","A city is using the Bus Transportation Management System (BTMS) to simplify the day-to-day activities related to the city’s public bus system.

The BTMS keeps track of a driver’s name and automatically assigns a unique ID to each driver. A bus route is identified by a unique number that is determined by city staff, while a bus is identified by its unique licence plate. The highest possible number for a bus route is 9999, while a licence plate number may be up to 10 characters long, inclusive. For up to a year in advance, city staff assigns buses to routes. Several buses may be assigned to a route per day. Each bus serves at the most one route per day but may be assigned to different routes on different days. Similarly, for up to a year in advance, city staff posts the schedule for its bus drivers. For each route, there is a morning shift, an afternoon shift, and a night shift. A driver is assigned by city staff to a shift for a particular bus on a particular day. The BTMS offers city staff great flexibility, i.e., there are no restrictions in terms of how many shifts a bus driver has per day. It is even possible to assign a bus driver to two shifts at the same time.

The current version of BTMS does not support the information of bus drivers or buses to be updated – only adding and deleting is supported. However, BTMS does support indicating whether a bus driver is on sick leave and whether a bus is in the repair shop. If that is the case, the driver cannot be scheduled or the bus cannot be assigned to a route. For a given day, an overview shows – for each route number – the licence plate number of each assigned bus, the entered shifts and the IDs and names of the assigned drivers. If a driver is currently sick or a bus is in the repair shop, the driver or bus, respectively, is highlighted in the overview.

Enumerations: 
Shift(morning, afternoon, night)

Classes: 
BTMS()
BusVehicle(string licencePlate, boolean inRepairShop)
Route(int number)
RouteAssignment(Date date)
Driver(string name, string id, boolean onSickLeave)
DriverSchedule(Shift shit)

Relationships:
1 BTMS contain * BusVehicle 
1 BTMS contain * Route
1 BTMS contain * RouteAssignment
1 BTMS contain * Drivers
1 BTMS contain * DriverSchedule

* RouteAssignment associate 1 BusVehicle
* RouteAssignment associate 1 Route

* DriverSchedule associate 1 Driver
* DriverSchedule associate 1 RouteAssignment
###
Description: The Helping Hand Store (H2S) collects second hand articles and non-perishable foods from residents. A resident enters a name, street address, phone number, optional email address, as well as a description of the items to be picked up. 

At the beginning of every weekday, a pickup route for that day is determined for each vehicle for which a volunteer driver is available. Volunteer drivers indicate their available days on the H2S website. The route takes into account the available storage space of a vehicle and the dimensions and weights of scheduled items. After completing all scheduled pickups, the driver drops off all collected second hand articles at H2S’s distribution center. Those articles that can still be used are tagged with an RFID device. In addition, the H2S employee assigns a category to the article from a standard list of 134 categories (e.g., baby clothing, women’s winter boots, fridge, microwave…). 

H2S allows those clients to indicate which categories of articles they need. An H2S employee calls them to let them know about the relevant articles that were dropped off that day. Delivery of such articles is made by a volunteer driver before picking up items according to the pickup route.

Enumerations:
ItemCategory(Baby Clothing, Fridge, ...)

Classes:
H2S()
Person(string name, string address, string phoneNumber, string emailAddress)
abstract UserRole()
Volunteer() 
Resident()
SecondHandArticle(string codeRFID, boolean discarded, ItemCategory category)
abstract item(string description, string dimension, int weight, Date requestedPickedDate)
Route(Date date)

Relationships:
1 H2S contain *Item
1 H2S contain *Route
1 H2S contain *UserRole
1 H2S contain *Person
1 Volunteer contain *Date

Volunteer inherit UserRole
Resident inherit UserRole
SecondHandArticle inherit Item

1 Person associate *UserRole
1 Volunteer associate * Route
0..1 Route associate *Item
0..1 Route associate *SecondHandArticle
1 Resident associate *Item
###
Description: The LabTracker software helps (i) doctors manage the requisition of tests and examinations for patients and (ii) patients book appointments for tests and examinations at a lab. For the remainder of this description, tests and examinations are used interchangeably. 

For a requisition, a doctor must provide their numeric practitioner number and signature for verification as well as their full name, their address, and their phone number. The signature is a digital signature, i.e., an image of the actual signature of the doctor. Furthermore, the doctor indicates the date from which the requisition is valid. The requisition must also show the patient’s information including their alpha-numeric health number, first name and last name, date of birth, address, and phone number. A doctor cannot prescribe a test for themselves but can prescribe tests to someone else who is a doctor. 

Several tests can be combined on one requisition but only if they belong to the same group of tests. For example, only blood tests can be combined on one requisition or only ultrasound examinations can be combined. It is not possible to have a blood test and an ultrasound examination on the same requisition. For each test, its duration is defined by the lab network, so that it is possible to schedule appointments accordingly. The duration of a test is the same at each lab. For some kinds of tests, it does not matter how many tests are performed. They take as long as a single test. For example, several blood tests can be performed on a blood sample, i.e., it takes as long to draw the blood sample for a single blood test as it does for several blood tests. 

A doctor may also indicate that the tests on a requisition are to be repeated for a specified number of times and interval. The interval is either weekly, monthly, every half year, or yearly. All tests on a requisition are following the same repetition pattern. 

The doctor and the patient can view the results of each test (either negative or positive) as well as the accompanying report. 

A patient is required to make an appointment for some tests while others are walk-in only. For example, x-ray examinations require an appointment, but blood tests are walk-in only (i.e., it is not possible to make an appointment for a blood test). On the other hand, some tests only require a sample to be dropped off (e.g., a urine or stool sample). 

To make an appointment for a requisition, a patient selects the desired lab based on the lab’s address and business hours. For requisitions with repeated tests, a patient is only allowed to make one appointment at a time. The confirmation for an appointment also shows a confirmation number, the date as well as start/end times, and the name of the lab as well as its registration number. It is possible to change or cancel an appointment at any time but doing so within 24 hours of the appointment incurs a change/cancellation fee. Each lab determines its own fee and business hours. All labs are open every day of the year and offer all tests. The business hours of a lab do not change from one week to the next. Each day a lab is open from the day’s start time to its end time, i.e., there are no breaks. 

Enumerations:
Interval(weekly, monthly, everyHalfYear, yearly)
AccessType(reservable, walkIn, dropOff)
DayOfWeek(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)

Classes:
LabTracker()
Person(string lastName, string firstName, string address, string phoneNumber)
abstract PersonRole(idNumber)
Patient(string dateOfBirth)
Doctor(string signature)
Requisition(string effectiveDate, int repetitionCount, Interval repetitionInterval)
TestResult(boolean negative, string report)
SpecificTest(Data date)
Appointment(string confirmation, Date date, string startTime, string endTime)
BusinessHour(DayOfWeek: dayOfWeek, string startTime, string endTime)
Lab(string registrationNumber, string name, string address, boolean changeCancelFee)
Test(string name, string duration)
TestType(string name, string durationAdditive, AccessType access)

Relationships:
1 LabTracker contain *Person
1 LabTracker contain *PersonRole
1 LabTracker contain *Requisition
1 LabTracker contain *TestResult
1 Lab Tracker contain *SpecificTest
1 LabTracker contain *Appointment
1 LabTracker contain *BusinessHour 
1 LabTracker contain *Lab
1 LabTracker contain *Test
1 LabTracker contain *TestType

1 Patient inherit PersonRole
1 Doctor inherit PersonRole

1 Person associate 0..2 PersonRole
1 Patient associate * Requisition
* Requisition associate *Appointment
* Appointment associate 1 Lab
1 Docter associate * Requisition
1 Requsition associate *SpecificTest
0..1 TestResult associate *SpecificTest
1 Lab associate 7 Business
1 Test associate *SpecificTest
1 TestType associate * Test
### 
Generate the lists of model classes and associations from the following given description.
Description: A smart home automation system (SHAS) offers various users to automatically manage smart home automation tasks. A smart home (located at a physical address) consists of several rooms, each of which may contain sensor devices and actuator (controller) devices of different types (e.g. temperature sensor, movement sensor, light controller, lock controller). Each sensor and actuator have a unique device identifier. Once a new sensor or actuator is activated or deactivated, SHAS will recognize the change and update its infrastructure map.

When SHAS is operational, a sensor device periodically provides sensor readings (recording the measured value and the timestamp). Similarly, a predefined set of control commands (e.g. lockDoor, turnOnHeating) can be sent to the actuator devices with the timestamp and the status of the command (e.g. requested, completed, failed, etc.). All sensor readings and control commands for a smart home are recorded by SHAS in an activity log.

Relevant alerts in a smart home can be set up and managed by its owner by setting up automation rules. An automation rule has a precondition and an action. The precondition is a Boolean expression constructed from relational terms connected by basic Boolean operators (AND, OR, NOT). Atomic relational terms may refer to rooms, sensors, actuators, sensor readings and control commands. The action is a sequence of control commands. 
For example, a sample rule could specify:
when actualTemperature by Device #1244 in Living Room < 18 and window is closed then turnOnHeating in Living Room

Automation rules can be created, edited, activated and deactivated by owners. Only deactivated rules can be edited. Rules can also depend on or conflict with other rules, thus a complex rule hierarchy can be designed. SHAS records whenever an active rule was triggered using a timestamp.","Classes:
SHAS()
SmartHome(string address)
Room(string name)
Sensor(int deviceID, string type, boolean active)
Actuator(int deviceID, string type, boolean active)
SensorReading(int value, Date timestamp)
ControlCommand(string status, Date timestamp, string command)
AutomationRule(string precondition, string action, boolean active)
ActivityLog(Date timestamp)
RuleHierarchy(int level)

Relationships:
1 SHAS contain *SmartHome
1 SHAS contain * ActivityLog
1 SHAS contain * RuleHierarchy
1 SmartHome contain * Room
1 SmartHome contain *AutomationRule
1 Room contain * Sensor
1 Room contain * Actuator
1 Sensor associate * SensorReading
1 Actuator associate * ControlCommand
* AutomationRule associate * SensorReading
* AutomationRule associate * ControlCommand
1 AutomationRule associate * RuleHierarchy","Enumerations:
DeviceStatus(Activated, Deactivated)
CommandType (lockDoor, turnOnHeating)
CommandStatus (Requested, Completed, Failed)
RuleStatus (created, edited, activated, deactivated )
BinaryOp (AND, OR )

Classes:
SHAS()
SmartHome()
User(string name)
Address(string city, string postalCode, string street, string aptNumber)
Room()
abstract Device(DeviceStatus deviceStatus, int deviceID)
SensorDevice()
ActuatorDevice()
ActvityLog()
abstract RuntimeElement(time timestamp)
SensorReading(double value)
ControlCommand(CommandType commandType, CommandStatus commandStatus)
AlertRule(RuleStatus ruleStatus)
abstract BooleanExpression()
RelationalTerm()
NotExpression()
BinaryExpression(BinaryOp binaryOp)
CommandSequence() 

Relationships: 
0..1 SHAS contain * SmartHome
1 SHAS contain * User

1 SmartHome contain 0..1 Address
1 SmartHome contain 0..* Room
1 SmartHome contain 0..1 ActivityLog
* SmartHome associate * User

1 Room contain * SensorDevice
1 Room contain * ActuatorDevice

1 ActivityLog contain * SensorReading
1 ActivityLog contain * ControlCommand

* SensorReading associate 1 SensorDevice

* ControlCommand associate 1 ActuatorDevice

1 Dcontain 0..1 BooleanExpression
1 AlertRule contain * CommandSequence

* RelationalTerm associate 0..1  Room
* RelationalTerm associate 0..1  SensorDevice
* RelationalTerm associate 0..1  ActuatorDevice
* RelationalTerm associate 0..1  SensorReading
* RelationalTerm associate 0..1  ControlCommand

0..1 NotExpression associate 1 BooleanExpression

0..1 BinaryExpression associate 1 BooleanExpreesion
0..1 BinaryExpression associate 1 BooleanExpreesion

* CommandSequence associate 0..1 CommandSequence
1 CommandSequence contain 0..1 ControlCommand

SensorDevice inherit Device
ActuatorDevice inherit Device
SensorReading inherit RuntimeElement"
HBMS,"Hotel Booking Management System (HBMS)

Business travellers use HMBS for booking special accommodation deals offered by participating hotels. Travellers register to HBMS by providing their name, billing information (incl. company name and address) and optional travel preferences (e.g. breakfast included, free wifi, 24/7 front desk, etc.).

When searching for accommodation, the traveller specifies the city, the date of arrival and departure, the number of needed rooms and the type of rooms (e.g. single, double, twin), minimum hotel rating (stars), a tentative budget (max. cost per night), and optionally, further travel preferences to filter offers in the search results. HBMS lists all available offers of hotels for the given travel period, and the traveller can either create a preliminary booking or complete a booking in the regular way.

In case of a preliminary booking, HBMS forwards the key parameters of the booking information (i.e. price, city area, hotel rating and key preferences and a unique booking identifier) to other hotels so that they can compete for the traveller with special offers provided within the next 24 hours. After 24-hour deadline, HBMS sends the five best special offers to the traveller who can switch to the new offer or proceed with the original preliminary booking.

In both cases, the traveller needs to provide credit card information to finalize a booking. Each finalized booking can be either pre-paid (i.e. paid immediately when it cannot be reimbursed), or paid at hotel (when the traveller pays during his/her stay). A finalized booking needs to be confirmed by the hotel within 24 hours. A booking may also contain a cancellation deadline: if the traveller cancels a confirmed booking before this deadline, then there are no further consequences. However, if a confirmed booking is cancelled after this deadline, then 1-night accommodation is charged for the traveller. HBMS stores all past booking information for a traveller to calculate a reliability rating.

Each hotel is located in a city at a particular address, and possibly run by a hotel chain. A hotel may announce its available types of rooms for a given period in HBMS, and may also inform HBMS when a particular type of room is fully booked. HBMS sends information about the preliminary booking information to competitor hotels together with the traveller’s preferences and his/her reliability rating. The competitor hotels may then provide a special offer. Once a booking is finalized, the hotel needs to send a confirmation to the traveller. If a completed booking is not confirmed by the hotel within 24 hours, then HBMS needs to cancel it, and reimburse the traveller in case of a pre-paid booking. If the hotel needs to cancel a confirmed booking, then financial compensation must be offered to the traveller.","A city is using the Bus Transportation Management System (BTMS) to simplify the day-to-day activities related to the city’s public bus system.

The BTMS keeps track of a driver’s name and automatically assigns a unique ID to each driver. A bus route is identified by a unique number that is determined by city staff, while a bus is identified by its unique licence plate. The highest possible number for a bus route is 9999, while a licence plate number may be up to 10 characters long, inclusive. For up to a year in advance, city staff assigns buses to routes. Several buses may be assigned to a route per day. Each bus serves at the most one route per day but may be assigned to different routes on different days. Similarly, for up to a year in advance, city staff posts the schedule for its bus drivers. For each route, there is a morning shift, an afternoon shift, and a night shift. A driver is assigned by city staff to a shift for a particular bus on a particular day. The BTMS offers city staff great flexibility, i.e., there are no restrictions in terms of how many shifts a bus driver has per day. It is even possible to assign a bus driver to two shifts at the same time.

The current version of BTMS does not support the information of bus drivers or buses to be updated – only adding and deleting is supported. However, BTMS does support indicating whether a bus driver is on sick leave and whether a bus is in the repair shop. If that is the case, the driver cannot be scheduled or the bus cannot be assigned to a route. For a given day, an overview shows – for each route number – the licence plate number of each assigned bus, the entered shifts and the IDs and names of the assigned drivers. If a driver is currently sick or a bus is in the repair shop, the driver or bus, respectively, is highlighted in the overview.

Enumerations: 
Shift(morning, afternoon, night)

Classes: 
BTMS()
BusVehicle(string licencePlate, boolean inRepairShop)
Route(int number)
RouteAssignment(Date date)
Driver(string name, string id, boolean onSickLeave)
DriverSchedule(Shift shit)

Relationships:
1 BTMS contain * BusVehicle 
1 BTMS contain * Route
1 BTMS contain * RouteAssignment
1 BTMS contain * Drivers
1 BTMS contain * DriverSchedule

* RouteAssignment associate 1 BusVehicle
* RouteAssignment associate 1 Route

* DriverSchedule associate 1 Driver
* DriverSchedule associate 1 RouteAssignment
###
Description: The Helping Hand Store (H2S) collects second hand articles and non-perishable foods from residents. A resident enters a name, street address, phone number, optional email address, as well as a description of the items to be picked up. 

At the beginning of every weekday, a pickup route for that day is determined for each vehicle for which a volunteer driver is available. Volunteer drivers indicate their available days on the H2S website. The route takes into account the available storage space of a vehicle and the dimensions and weights of scheduled items. After completing all scheduled pickups, the driver drops off all collected second hand articles at H2S’s distribution center. Those articles that can still be used are tagged with an RFID device. In addition, the H2S employee assigns a category to the article from a standard list of 134 categories (e.g., baby clothing, women’s winter boots, fridge, microwave…). 

H2S allows those clients to indicate which categories of articles they need. An H2S employee calls them to let them know about the relevant articles that were dropped off that day. Delivery of such articles is made by a volunteer driver before picking up items according to the pickup route.

Enumerations:
ItemCategory(Baby Clothing, Fridge, ...)

Classes:
H2S()
Person(string name, string address, string phoneNumber, string emailAddress)
abstract UserRole()
Volunteer() 
Resident()
SecondHandArticle(string codeRFID, boolean discarded, ItemCategory category)
abstract item(string description, string dimension, int weight, Date requestedPickedDate)
Route(Date date)

Relationships:
1 H2S contain *Item
1 H2S contain *Route
1 H2S contain *UserRole
1 H2S contain *Person
1 Volunteer contain *Date

Volunteer inherit UserRole
Resident inherit UserRole
SecondHandArticle inherit Item

1 Person associate *UserRole
1 Volunteer associate * Route
0..1 Route associate *Item
0..1 Route associate *SecondHandArticle
1 Resident associate *Item
###
Description: The LabTracker software helps (i) doctors manage the requisition of tests and examinations for patients and (ii) patients book appointments for tests and examinations at a lab. For the remainder of this description, tests and examinations are used interchangeably. 

For a requisition, a doctor must provide their numeric practitioner number and signature for verification as well as their full name, their address, and their phone number. The signature is a digital signature, i.e., an image of the actual signature of the doctor. Furthermore, the doctor indicates the date from which the requisition is valid. The requisition must also show the patient’s information including their alpha-numeric health number, first name and last name, date of birth, address, and phone number. A doctor cannot prescribe a test for themselves but can prescribe tests to someone else who is a doctor. 

Several tests can be combined on one requisition but only if they belong to the same group of tests. For example, only blood tests can be combined on one requisition or only ultrasound examinations can be combined. It is not possible to have a blood test and an ultrasound examination on the same requisition. For each test, its duration is defined by the lab network, so that it is possible to schedule appointments accordingly. The duration of a test is the same at each lab. For some kinds of tests, it does not matter how many tests are performed. They take as long as a single test. For example, several blood tests can be performed on a blood sample, i.e., it takes as long to draw the blood sample for a single blood test as it does for several blood tests. 

A doctor may also indicate that the tests on a requisition are to be repeated for a specified number of times and interval. The interval is either weekly, monthly, every half year, or yearly. All tests on a requisition are following the same repetition pattern. 

The doctor and the patient can view the results of each test (either negative or positive) as well as the accompanying report. 

A patient is required to make an appointment for some tests while others are walk-in only. For example, x-ray examinations require an appointment, but blood tests are walk-in only (i.e., it is not possible to make an appointment for a blood test). On the other hand, some tests only require a sample to be dropped off (e.g., a urine or stool sample). 

To make an appointment for a requisition, a patient selects the desired lab based on the lab’s address and business hours. For requisitions with repeated tests, a patient is only allowed to make one appointment at a time. The confirmation for an appointment also shows a confirmation number, the date as well as start/end times, and the name of the lab as well as its registration number. It is possible to change or cancel an appointment at any time but doing so within 24 hours of the appointment incurs a change/cancellation fee. Each lab determines its own fee and business hours. All labs are open every day of the year and offer all tests. The business hours of a lab do not change from one week to the next. Each day a lab is open from the day’s start time to its end time, i.e., there are no breaks. 

Enumerations:
Interval(weekly, monthly, everyHalfYear, yearly)
AccessType(reservable, walkIn, dropOff)
DayOfWeek(Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday)

Classes:
LabTracker()
Person(string lastName, string firstName, string address, string phoneNumber)
abstract PersonRole(idNumber)
Patient(string dateOfBirth)
Doctor(string signature)
Requisition(string effectiveDate, int repetitionCount, Interval repetitionInterval)
TestResult(boolean negative, string report)
SpecificTest(Data date)
Appointment(string confirmation, Date date, string startTime, string endTime)
BusinessHour(DayOfWeek: dayOfWeek, string startTime, string endTime)
Lab(string registrationNumber, string name, string address, boolean changeCancelFee)
Test(string name, string duration)
TestType(string name, string durationAdditive, AccessType access)

Relationships:
1 LabTracker contain *Person
1 LabTracker contain *PersonRole
1 LabTracker contain *Requisition
1 LabTracker contain *TestResult
1 Lab Tracker contain *SpecificTest
1 LabTracker contain *Appointment
1 LabTracker contain *BusinessHour 
1 LabTracker contain *Lab
1 LabTracker contain *Test
1 LabTracker contain *TestType

1 Patient inherit PersonRole
1 Doctor inherit PersonRole

1 Person associate 0..2 PersonRole
1 Patient associate * Requisition
* Requisition associate *Appointment
* Appointment associate 1 Lab
1 Docter associate * Requisition
1 Requsition associate *SpecificTest
0..1 TestResult associate *SpecificTest
1 Lab associate 7 Business
1 Test associate *SpecificTest
1 TestType associate * Test
### 
Generate the lists of model classes and associations from the following given description.
Description: Hotel Booking Management System (HBMS)

Business travellers use HMBS for booking special accommodation deals offered by participating hotels. Travellers register to HBMS by providing their name, billing information (incl. company name and address) and optional travel preferences (e.g. breakfast included, free wifi, 24/7 front desk, etc.).

When searching for accommodation, the traveller specifies the city, the date of arrival and departure, the number of needed rooms and the type of rooms (e.g. single, double, twin), minimum hotel rating (stars), a tentative budget (max. cost per night), and optionally, further travel preferences to filter offers in the search results. HBMS lists all available offers of hotels for the given travel period, and the traveller can either create a preliminary booking or complete a booking in the regular way.

In case of a preliminary booking, HBMS forwards the key parameters of the booking information (i.e. price, city area, hotel rating and key preferences and a unique booking identifier) to other hotels so that they can compete for the traveller with special offers provided within the next 24 hours. After 24-hour deadline, HBMS sends the five best special offers to the traveller who can switch to the new offer or proceed with the original preliminary booking.

In both cases, the traveller needs to provide credit card information to finalize a booking. Each finalized booking can be either pre-paid (i.e. paid immediately when it cannot be reimbursed), or paid at hotel (when the traveller pays during his/her stay). A finalized booking needs to be confirmed by the hotel within 24 hours. A booking may also contain a cancellation deadline: if the traveller cancels a confirmed booking before this deadline, then there are no further consequences. However, if a confirmed booking is cancelled after this deadline, then 1-night accommodation is charged for the traveller. HBMS stores all past booking information for a traveller to calculate a reliability rating.

Each hotel is located in a city at a particular address, and possibly run by a hotel chain. A hotel may announce its available types of rooms for a given period in HBMS, and may also inform HBMS when a particular type of room is fully booked. HBMS sends information about the preliminary booking information to competitor hotels together with the traveller’s preferences and his/her reliability rating. The competitor hotels may then provide a special offer. Once a booking is finalized, the hotel needs to send a confirmation to the traveller. If a completed booking is not confirmed by the hotel within 24 hours, then HBMS needs to cancel it, and reimburse the traveller in case of a pre-paid booking. If the hotel needs to cancel a confirmed booking, then financial compensation must be offered to the traveller.","Enumerations: 
RoomType(single, double, twin)
BookingType(preliminary, regular)
PaymentStatus(paid, unpaid)
PaymentType(atHotel, prePaid)
HotelRating(star_1, star_2, star_3, star_4, star_5)

Classes:
HBMS()
Traveler(string name, string billingInfo, boolean breakfast, boolean freeWifi, boolean frontDesk24, string reliabilityRating)
City(string name)
Hotel(string name, boolean chain, string address, HotelRating rating)
Room(string availability, RoomType type)
Booking(DateTime arrivalDate, DateTime departureDate, int roomsRequired, RoomType roomType, string budget, boolean breakfast, boolean freeWifi, boolean frontDesk24, HotelRating minRating, BookingType type, string uniqueID)
SpecialOffer(string offerDetails, DateTime validTill)

Relationships:
1 HBMS contain *Traveler
1 HBMS contain *City
1 HBMS contain *Hotel
1 HBMS contain *Room
1 HBMS contain *Booking
1 HBMS contain *SpecialOffer

* Traveler associate *Booking
* City associate *Hotel
1 Hotel associate *Room
1 Booking associate *Hotel
1 Booking associate *SpecialOffer
1 Hotel associate *SpecialOffer

1 Room associate 0..* Booking
1 Bookings associate 0..* Traveler
1 Hotelassociate 0..* Booking
SpecialOffer associate 1..* Booking","Enumerations:
RoomType(SINGLE, DOUBLE, TWIN)
BookingStatus(FINALIZED, CONFIRMED, CANCELLED_BY_HBMS, PRELIMINARY, CANCELLED_BY_TRAVELLER, CANCELLED_BY_HOTEL)
PaymentType(PREPAID, PAID_AT_HOTEL)

Classes:
HotelChain()
HotelBookingManager()
Traveller(string name, int reliabilityRating)
BillingInformation(string companyName, string address)
TravelPreference(string preference, string value)
Hotel(string city, string country, string area, RoomAvailability availability)
abstract Offer()
SpecialOffer()
RegularOffer()
TravelSearch()
SearchInfo()
RoomAvailability()
abstract TripInfo(int numberOfRooms, RoomType roomType, date arrivalDate, date departureDate, float budgetPerNight)
BookingInfo()
Booking(int bookingId, date cancellationDeadline, string creditCardNumber, BookingStatus bookingStatus, PaymentType paymentType, date confirmationDate, float paidAmount)

Relationships: 
1 HotelChain contain *Hotel
1 HotelBookingManager contain *HotelChain
1 HotelBookingManager contain *Traveller
1 Hotel contain *Offer
1 Hotel contain *RoomAvailability
1 Traveller contain *TravelSearch
1 Traveller contain *TravelPreference
1 Traveller contain 1 BillingInformation
1 TravelSearch contain 1 SearchInfo
1 TravelSearch contain *TravelPreference

1 Booking contain 1 BookingInfo

1 SpecialOffer inherit Offer
1 RegularOffer inherit Offer
1 RoomAvailability inherit TripInfo
1 SearchInfo inherit TripInfo

1 BookingInfo inherit TripInfo

*RegularOffer associate * TravelSearch

1 Hotel associate * Booking
Booking associate 0..1 Offer
* Booking associate 1 Traveller
* SpecialOffer associate 1 BookingInfo
BookingInfo associate 0..5 SpecialOffer
"
